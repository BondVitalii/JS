// ========== Модуль-1 Занятие-1 ==========
// ________________________________________

/** Основи синтаксису !!!
|============================
При написанні коду важливо не просто знати, який символ або конструкцію можна використовувати, але насамперед необхідно розуміти термінологію і складові вихідного коду. В цій секції нам не важливе розуміння як що працює, ми тільки познайомимось з базовою термінологією і синтаксисом.

// ----------------------------------------------

Інструкція​

Інструкція (statement) - це пов'язаний набір слів і символів із синтаксису мови, які об'єднуються з метою вираження однієї ідеї, однієї інструкції для машини.

a = b * 2;

Інструкції в JavaScript завершуються крапкою з комою, яку можна порівняти із крапкою наприкінці речення вашої рідної мови.

a і b - змінні (як в алгебраїчному рівнянні), це сховища даних, які використовує програма. Змінна складається із ідентифікатора (імені) і пов'язаного з ним значення.
2 - просто число. Це називається значенням літерала (literal value), тому що не зберігається у змінній.
= і * - оператори, вчиняють дії над значеннями і змінними.

Уявімо, що змінна b вже зберігає число 10. Тоді ця інструкція каже машині:

Піди знайди змінну з ідентифікатором b і запитай, яке в неї зараз значення.
Підстав значення змінної b (10), у твердження на місце b.
Виконай операцію множення 10 на 2.
Запиши результат обчислення виразу правої частини у змінну a.

! ЦІКАВО
Завершення інструкції крапкою з комою не вимагається, однак, настійно рекомендується завжди її ставити. Це просте правило зробить код зрозумілішим і допоможе уникнути неочевидних помилок.

// ----------------------------------------------

Вираз

Інструкції складаються із частин, як і в будь-якій мові речення складаються із фраз і ці фрази називаються виразами.

Вираз (expression) - посилання на змінну або значення, або на набір змінних і значень в поєднанні з операторами.

[ [a] = [ [b] * [2] ] ]

Інструкція з прикладу вище містить 5 виразів, які виділені квадратними дужками для візуалізації (це не синтаксис мови):

[2] - вираз значення літерала.
[b]і[a] - вирази змінної, означають необхідність підставити значення змінної, але лише у тому випадку, якщо змінна складається із правої частини виразу присвоювання.
[b * 2] - арифметичний вираз множення.
[a = b * 2] - вираз присвоювання. У нашому випадку вказує на необхідність обчислення правої частини виразу і присвоювання результату змінної a у лівій частині виразу.

Також існує вираз виклику, порівняння тощо. Ми не будемо зараз розглядати їх усіх, нам важливо розуміти, з яких частин складається вихідний код і як правильно його читати.

Інтерфейс

Коли ми підходимо до автомату з кавою або сідаємо за кермо автомобіля, існує певний набір елементів управління, з яким можна взаємодіяти. У програмуванні це називається інтерфейс.

Інтерфейс - це набір властивостей і методів сутності, доступних для використання у вихідному коді.

// ----------------------------------------------

Властивість

У нас з вами є властивості: зріст, вага, колір очей, тобто якісь описові характеристики. Так само і у даних є властивості, наприклад у рядка є властивість його довжини. Синтаксис звернення до властивості дуже простий - через крапку.

сутність.ім`я_властивості

Для наочності, звернемось до властивості рядка length, яка містить кіл-ть символів рядка.

"JavaScript is awesome".length;

// ----------------------------------------------

Метод

Це виклик дії, наприклад присісти або плавати, тобто якась активна операція. Так само і у даних є свої заздалегідь визначені методи, наприклад, можна додати або видалити елементи з колекції, перевести рядок в інший регістр тощо. Синтаксис виклику метода дуже схожий на звернення до властивості, але в кінці додається пара круглих дужок.

сутність.ім`я_метода()

Для прикладу звернемось до методу рядка toUpperCase(), який зробить усі літери великими.

"JavaScript is awesome".toUpperCase();

// ----------------------------------------------

Суворий режим

Нова можливість у специфікації ECMAScript 5, яка дозволяє переводити скрипт у режим повної відповідності сучасному стандарту. Це запобігає певним помилкам, як-от використання небезпечних і застарілих конструкцій.

Для того, щоб перевести скрипт в суворий режим, достатньо зазначити директиву на початку js-файлу. Завжди пишіть код в суворому режимі.

script.js

"use strict";
// Це коментар. Далі йде увесь код JS-файлу

|============================
*/

/** Змінні і типи !!!
|============================
Змінні використовуються для зберігання даних і складаються із ідентифікатора (імені) і області в пам'яті, де зберігається їх значення. 
Змінну можна уявити у вигляді коробки з назвою, в якій щось лежить (значення).

<ключове_слово> <ім`я_змінної> = <значення>

Імена змінних

Ідентифікатор - це ім'я змінної, функції або класу. Складається з одного або декількох символів у наступному форматі.

Першим символом повинна бути літера a-z або A-Z, символ підкреслення _ або знак долара $.
Інші символи можуть бути літерами a-z, A-Z, цифрами 0-9, підкресленнями _ і знаками долара $.
Ідентифікатори чуттєві до регістру. Це означає, що змінні user, usEr і User - різні.
Ім'я змінної повинно бути зрозумілим.

# ❌ Погано
chislo
korzina_tovarov
profil_polzovatelya
tekushiy_mesyaz

# ✅ Добре
number
cart
userProfile
currentMonth

Використання camelCase-нотації для ідентифікаторів - це стандарт. Перше слово пишеться малими літерами, а кожне наступне починається з великої. Наприклад, user, greetUser, getUserData, isActive, activeGuestCount, totalWorkerSalary.

Як називати змінні
Домовленість про імена змінних

// ----------------------------------------------

Оголошення змінних

Оголошення змінної починається з ключового слова const. 
Така змінна повинна бути одразу ініціалізована значенням, після чого її не можна перевизначити.

Змінні, оголошені як const, обов'язково повинні бути ініціалізовані значенням під час оголошення, інакше виникне помилка.

const yearOfBirth = 2006;
console.log(yearOfBirth); // 2006

Якщо зміна оголошена як const, перезаписати її значення не можна.
При спробі присвоїти нове значення, виникне помилка виконання скрипту.

yearOfBirth = 2020; // ❌ Неправильно, виникне помилка

Для того, щоб оголосити змінну, якій у подальшому можна буде присвоїти нове значення, використовується ключове слово let.

Змінним, оголошеним через let, не обов'язково одразу присвоювати значення.

let age;

Якщо змінній, оголошеній як let, не було присвоєно значення, вона ініціалізується спеціальним значенням undefined (не визначено).

console.log(age); // undefined

console.log() - це метод для виведення даних у консоль браузера, пізніше познайомимось з ним детальніше.

Якщо змінна оголошена як let, її значення можна перезаписати.

age = 14;
console.log(age); // 14

! ЦІКАВО

Оголошення змінної без ключового слова let або const призведе до помилки, якщо скрипт виконується в суворому режимі.

Коли використовувати const і let​

Єдина відмінність const і let полягає у тому, що const забороняє повторно присвоювати змінній будь-яке значення. 
Оголошення const робить код читабельнішим, тому що змінна завжди посилається на одне і те саме зачення. 
У випадку з let такої впевненості немає.

Буде розумно використовувати let і const наступним чином:

Використовуйте const за замовчуванням, більшість змінних будуть оголошені саме таким чином.
Використовуйте let, якщо необхідно присвоїти змінній інше значення під час виконання скрипту.

// ----------------------------------------------

константи і КОНСТАНТИ

Імена КОНСТАНТ - змінних, значення яких не змінюється ніколи впродовж роботи всього скрипту, як правило, записуються у форматі UPPER_SNAKE_CASE.

// Константа, що зберігає значення кольору
const COLOR_TEAL = "#009688";

// Константа, що зберігає повідомлення про результат логіну
const LOGIN_SUCCESS_MESSAGE = "Ласкаво просимо!";

Абсолютна більшість змінних – константи в іншому сенсі, вони просто не змінюють значення після присвоєння. Але, у різних запусках скрипту, це значення може бути різним. Імена таких змінних записують за допомогою формату camelCase.

Звернення до змінної​

Важливо розрізняти невизначені і неоголошені змінні.

Невизначена (undefined) - це змінна, яка була оголошена ключовим словом let, але не ініціалізована значенням. За замовчуванням їй присвоюється початкове значення undefined.

let username;
console.log(username); // undefined

// -----------

Неоголошена (undeclared або not defined) - це змінна, яка не була оголошена в доступній області видимості. Спроба звернутися до змінної до її оголошення призведе до помилки. Наприклад, щоб прочитати або змінити її значення.

// ❌ Неправильно, буде помилка
age = 15; // ReferenceError: Cannot access 'age' before initialization
console.log(age); // ReferenceError: age is not defined

// Оголошення змінної age
let age = 20;

// ✅ Правильно, звертаємось після оголошення
age = 25;
console.log(age); // 25

// ----------------------------------------------

Примітивні типи

В JavaScript змінна не асоціюється з будь-яким типом даних, тип має її значення. 
Тобто змінна може зберігати значення різних типів.

Number 

- цілі числа і числа з плаваючою комою (крапкою).

const age = 20;
const points = 15.8;

// -----------

String 

- рядки, послідовність з нуля або більше символів. 
Рядок починається і закінчується одинарними ', або подвійними лапками ".

const username = "Mango";
const description = "JavaSript для початківців";

// -----------

Boolean 

- логічний тип даних, прапорці стану. Всього два значення: true і false. 
Наприклад, на запитання чи увімкнено світло в кімнаті, можна відповісти так (true) або ні (false).

true — так, вірно, істина, 1
false — ні, невірно, неправда, 0
Зверніть увагу на імена змінних, що містять буль. Вони ставлять запитання, і відповідь на нього - так або ні.

const isLoggedIn = true;
const canMerge = false;
const hasChildren = true;
const isModalOpen = false;

// -----------

null 

- особливе значення, яке по суті означає ніщо. Використовується в тих ситуаціях, коли необхідно явно вказати порожнечу. Наприклад, якщо користувач нічого не вибрав, то можна сказати що значення null.

let selectedProduct = null;

// -----------

undefined 

- ще одне спеціальне значення. За замовчуванням, коли змінна оголошується, але не ініціалізується, її значення не визначено, їй присвоюється undefined.

let username;
console.log(username); // undefined

// ----------------------------------------------

Оператор typeof​

Використовується для отримання типу значення змінної. Повертає на місце свого виклику тип значення змінної, вказаного після нього - рядок, в якому вказано тип.

let username;
console.log(typeof username); // "undefined"

let inputValue = null;
console.log(typeof inputValue); // "object"

const quantity = 17;
console.log(typeof quantity); // "number"

const message = "JavaScript is awesome!";
console.log(typeof message); // "string"

const isSidebarOpen = false;
console.log(typeof isSidebarOpen); // "boolean"

|============================
*/

/** Взаємодія з користувачем !!!
|============================
Розберемо базові операції введення/виведення, достатні для отримання і відображення даних від користувача, перш ніж навчимося працювати з HTML-документом.

Виведення даних
console.log() і alert()

Для виведення даних існує два методи: console.log() і alert(). 
В круглих дужках зазначаємо ім'я змінної, значення якої необхідно вивести.

// ----------

Метод console.log()

const message = "JavaScript is awesome!";
console.log(message); // JavaScript is awesome!

Спочатку можна вказати будь-який описовий рядок, після чого поставити кому і вказати ім'я змінної.

const username = "Mango";
console.log("Username is ", username); // Username is Mango

// ----------

Метод alert() 

- виводить модальне вікно, текст якого відповідає значенню змінної (або літерала), яку передаємо в дужках.

const message = "JavaScript is awesome!";
alert(message);

! ЦІКАВО
console і alert - частина інтерфейсу window - глобального об'єкта, доступного при виконанні скрипту на веб-сторінці. 
Запис window.alert() зайвий, пишемо просто alert() або console.log(). 
Детальніше про це будемо говорити далі.

// ----------------------------------------------

Отримання даних

Це також методи з інтерфейсу window. 
Результатом свого виконання вони повертають те, що було введено користувачем, тому результат їх роботи можна записати у змінну для подальшого використання.

// ----------

confirm() 

- виводить модальне вікно з повідомленням, і дві кнопки, Ok і Cancel. Натискаючи на Ok, результатом будет true, натискаючи на Cancel - повертається false.

// Просимо клієнта підтвердити бронювання готелю
// і зберігаємо результат роботи confirm у змінну

const isComing = confirm("Please confirm hotel reservation");
console.log(isComing);

// ----------

prompt() 

- виводить модальне вікно з полем введення і кнопками Ok і Cancel. Натискаючи на Ok, результатом буде те, що ввів користувач, у випадку Cancel - повертається null.

// Запитуємо назву готеля, в якому хотів би зупинитися клієнт
// і зберігаємо результат виклику prompt у змінну.

const hotelName = prompt("Please enter desired hotel name");
console.log(hotelName);

Важлива особливість prompt полягає в тому, що незалежно від того, що ввів користувач, завжди повернеться рядок. 
Тобто, якщо користувач ввів 5, то повернеться не число 5, а рядок "5".

const value = prompt("Please enter a number!");
console.log(typeof value); // "string"
console.log(value); // "5"

// ----------------------------------------------


// Репета
// ==============================================

* - Ввод пользовователя
* - Методы window.confirm() и window.prompt()

// const shouldRenew = confirm('Хотите продлить подписку?');
// console.log(shouldRenew);

// let quantity = prompt('Введите количество товаров');
// quantity = Number(quantity);
// console.log(quantity);
// console.log(typeof quantity);

|============================
*/

/** Основні оператори !!!
|============================
Математичні оператори

Призначення, функціонал і пріоритет (порядок) операцій нічим не відрізняються від шкільного курсу алгебри. 
Оператори повертають значення у вигляді результату виразу.

const x = 10;
const y = 5;

// Додавання
console.log(x + y); // 15

// Віднімання
console.log(x - y); // 5

// Множення
console.log(x * y); // 50

// Ділення
console.log(x / y); // 2

// Остача від ділення
console.log(x % y); // 0

// Додавання із заміною (також є для всіх інших операторів)
let value = 5;

// Аналогічно запису value = value + 10;
value += 10;
console.log(value); // 15

! ЦІКАВО
Важливо запам'ятати терміни складових виразу. + - * / % називаються оператори, а те, на чому вони застосовуються - операнди.

// ----------------------------------------------

Оператори порівняння

Використовуються для порівняння двох значень. Результатом свого виконання повертають буль - true або false, тобто «так» або «ні».

a > b і a < b - більше/менше
a >= b і a <= b - більше/менше або дорівнює
a == b - рівність
a != b - нерівність
a === b - строга рівність
a !== b - строга нерівність

const x = 5;
const y = 10;
const z = 5;

console.log("x > y:", x > y); // false
console.log("x < y:", x < y); // true
console.log("x < z:", x < z); // false
console.log("x <= z:", x <= z); // true
console.log("x === y:", x === y); // false
console.log("x === z:", x === z); // true
console.log("x !== y:", x !== y); // true
console.log("x !== z:", x !== z); // false

// ----------------------------------------------

Оператори рівності

«Нестрогі» оператори рівності == і != виконують перетворення типів порівнюваних значень у число, що може призвести до помилок, особливо у початківців.

// ❌ Погано, виконується приведення типів
console.log(5 == "5"); // true
console.log(5 != "5"); // false
console.log(1 == true); // true
console.log(1 != true); // false

На наступній ілюстрації показана таблиця порівняння значень з використанням операторів нестрогої рівності.

Тому для перевірки рівності або нерівності двох значень, використовуються тільки оператори === (строга рівність) і !== (строга нерівність), які не виконують приведення типів операндів.

// ✅ Добре, приведення типів не виконується
console.log(5 === "5"); // false
console.log(5 === 5); // true
console.log(5 !== "5"); // true
console.log(5 !== 5); // false
console.log(1 === true); // false
console.log(1 !== true); // true

У такому випадку, все дорівнює собі. Перед оцінкою нічого не перетворюється.

|============================
*/

/** Числа !!!
|============================
Усі числа в JavaScript, як цілі, так і дробові, мають тип Number і їх можна записувати не тільки в десятковій системі числення.

Приведення до числа
Більшість арифметичних операцій і математичних функцій перетворюють значення у число автоматично. 
Для того, щоб зробити це явно, використовуйте функцію Number(val), передаючи їй у val те, що потрібно привести до числа.
Якщо значення привести до числа неможливо, результатом буде спеціальне числове значення NaN (Not a Number). 
Аналогічним чином відбувається перетворення і в інших математичних операторах і функціях.

const valueA = "5";
console.log(Number(valueA)); // 5
console.log(typeof Number(valueA)); // "number"

const valueB = "random string";
console.log(Number(valueB)); // NaN
console.log(typeof Number(valueB)); // "number

// ----------------------------------------------

Методи Number.parseInt() і Number.parseFloat()

Перетворюють рядок символ за символом, доки це можливо. 
У разі виникнення помилки повертається підсумкове число.

// ----------

Метод Number.parseInt() парсить з рядка ціле число.

console.log(Number.parseInt("5px")); // 5
console.log(Number.parseInt("12qwe74")); // 12
console.log(Number.parseInt("12.46qwe79")); // 12
console.log(Number.parseInt("qweqwe")); // NaN

// ----------

Метод Number.parseFloat() парсить з рядка дробове число.

console.log(Number.parseFloat("5px")); // 5
console.log(Number.parseFloat("12qwe74")); // 12
console.log(Number.parseFloat("12.46qwe79")); // 12.46
console.log(Number.parseFloat("qweqwe")); // NaN

// ----------------------------------------------

Перевірка на число

Для перевірки на число можна використовувати метод Number.isNaN(val).
Він перевіряє, чи вказане значення є NaN.Метод відповідає на запитання "Це Not A Number?" і повертає:

true - якщо значення val - NaN
false - якщо значення val - не NaN

Для всіх значень val, крім NaN, при передачі в Number.isNaN(val) поверне false.
Цей метод не намагається перетворити val в число, а просто виконує перевірку на NaN.

const validNumber = Number("51"); // 51
console.log(Number.isNaN(validNumber)); // false

const invalidNumber = Number("qweqwe"); // NaN
console.log(Number.isNaN(invalidNumber)); // true

// ----------------------------------------------

Додавання чисел з рухомою крапкою (комою)

Додаючи нецілі числа, в JavaScript і в інших мовах програмування є особливість. 
Якщо коротко, то 0.1 + 0.2 не дорівнює 0.3, результат додавання буде більший, ніж 0.3. 
Це тому що машина рахує у двійковій системі.

Число 0.1 у двійковій системі числення - це нескінченний дріб, оскільки у двійковій системі одиниця не ділиться на десять. 
Двійкове значення нескінченних дробів зберігається тільки до певного знаку, тому виникає неточність. 
При додаванні 0.1 і 0.2, додаються дві неточності, виходить незначна, але все-таки помилка в обчисленнях.

console.log(0.1 + 0.2 === 0.3); // false
console.log(0.1 + 0.2); // 0.30000000000000004

Звичайно, це не значить, що точні обчислення для таких чисел неможливі. 
Існує декілька методів вирішення цієї проблеми.

Можна зробити їх цілими, помноживши на N, додати, а потім результат поділити також на N.

console.log(0.17 + 0.24); // 0.41000000000000003
console.log((0.17 * 100 + 0.24 * 100) / 100); // 0.41

Ще один спосіб - додати, а результат скоротити до певного знаку після коми за допомогою методу toFixed().

console.log(0.17 + 0.24); // 0.41000000000000003
console.log((0.17 + 0.24).toFixed(2)); // 0.41

// ----------------------------------------------

Клас Math​

Один із вбудованих класів, який надає набір методів для роботи з числами. 
Знання всіх методів напам'ять не вимагається, тільки деяких, найбільш корисних.

// Math.floor(num) - повертає найменше ціле число,
// менше, або яке дорівнює зазначеному числу
console.log(Math.floor(1.7)); // 1

// Math.ceil(num) - повертає найбільше ціле число,
// більше, або яке дорівнює зазначеному числу.
console.log(Math.ceil(1.2)); // 2

// Math.round(num) - повертає значення числа,
// округленого до найближчого цілого
console.log(Math.round(1.2)); // 1
console.log(Math.round(1.5)); // 2

// Math.max(num1, num2, ...) - повертає найбільше ціле число з набору
console.log(Math.max(20, 10, 50, 40)); // 50

// Math.min(num1, num2, ...) - повертає найменше ціле число з набору
console.log(Math.min(20, 10, 50, 40)); // 10

// Math.pow(base, exponent) - піднесення до степеня
console.log(Math.pow(2, 4)); // 16

// Math.random() - повертає псевдовипадкове число в діапазоні [0, 1)
console.log(Math.random()); // випадкове число між 0 і 1
console.log(Math.random() * (10 - 1) + 1); // псевдовипадкове число від 1 до 10

|============================
*/

/** Рядки !!!
|============================
Рядок - це індексований набір з нуля або більше символів, взятих в одинарні або подвійні лапки.

const username = "Mango";

Важливо пам'ятати, що індексація елементів рядка починається з нуля. 
Наприклад, в рядку "JavaScript" літера "J" стоїть на позиції з індексом 0, а "t" - під індексом 9.

JavaScript  (position J-1, a-2, v-3, a-4, S-5, c-6, r-7, i-8, p-9, t-10)
JavaScript  (index J-0, a-1, v-2, a-3, S-4, c-5, r-6, i-7, p-8, t-9)

Вміст рядка не можна змінити, лише прочитати. 
Тобто, не можна взяти будь-який символ і замінити його, як тільки рядок створений - він такий назавжди. 
Можна лише створити повністю новий рядок і присвоїти у змінну замість старого.

// ----------------------------------------------

Конкатенація рядків

!Якщо застосувати оператор + до рядка і будь-якого іншого типу даних, результатом операції «додавання» буде рядок. 
Ця операція називається конкатенація, або додавання рядків.

Під час конкатенації, будь-який тип даних приводиться до рядка і зшивається з рядком, але є особливість - послідовність запису операндів.

Послідовність операцій має значення, перетворення типів відбувається тільки в момент операції додавання з рядком, до цього моменту діють звичні правила математики.

const message = "Mango " + "is" + " happy";
console.log(message); // Mango is happy

Подивимось на різний порядок операндів.

console.log(1 + "2"); // "12"
console.log(1 + "2" + 4); // "124"
console.log(1 + 2 + "4"); // "34"

В останньому прикладі відбулася математична операція додавання для перших двох чисел 1 і 2, після чого число 3 було перетворено у рядок "3" і зшито з рядком "4".

// ----------------------------------------------

Шаблонні рядки

!Шаблонні рядки - це альтернатива конкатенації зі зручнішим синтаксисом. 
Шаблонний рядок береться у зворотні (косі) лапки, замість подвійних або одинарних, і може містити заповнювачі місця, які позначаються знаком долара і фігурними дужками - ${вираз}.

Використовуючи змінні, необхідно скласти рядок з підставленими значеннями

const guestName = "Манго";
const roomNumber = 207;
const greeting =
  "Welcome " + guestName + ", your room number is " + roomNumber + "!";
console.log(greeting); // "Welcome Mango, your room number is 207!"

Складати рядки з підставленими значеннями, використовуючи конкатенацію, - дуже незручно. 
На допомогу приходять шаблонні рядки та інтерполяція.

const guestName = "Манго";
const roomNumber = 207;
const greeting = `Welcome ${guestName}, your room number is ${roomNumber}!`;
console.log(greeting); // "Welcome Mango, your room number is 207!"

// ----------------------------------------------

Властивості і методи рядків

У кожного рядка є вбудовані властивості і методи, розглянемо деякі з них.

Властивість length.
Для того, щоб дізнатися довжину рядка, тобто кількість його символів, у всіх рядків є вбудована властивість length, значення якої можна отримати, звернувшись до нього через крапку після імені змінної або рядкового літерала.

const message = "Welcome to Bahamas!";
console.log(message.length); // 19
console.log("There is nothing impossible to him who will try".length); // 47

// ----------------------------------------------

Методи toLowerCase() і toUpperCase()​

Повертають новий рядок у відповідному регістрі, не змінюючи оригінальний рядок.

const message = "Welcome to Bahamas!";
console.log(message.toLowerCase()); // "welcome to bahamas!"
console.log(message.toUpperCase()); // "WELCOME TO BAHAMAS!"
console.log(message); // "Welcome to Bahamas!"

Бувають ситуації, коли всі символи в рядку необхідно перетворити в один регістр, верхній або нижній. 
Наприклад, для пошуку за ключовим словом, коли користувач вводить рядок 'saMsUng', а порівняти його потрібно з рядком 'samsung' або 'SAMSUNG'.

console.log("saMsUng" === "samsung"); // false
console.log("saMsUng" === "SAMSUNG"); // false

Щоб не вимагати абсолютно точне введення, можна зробити «нормалізацію» введеного користувачем рядка, тобто перетворити всі його символи у верхній або нижній регістр. 
Методи рядка toLowerCase() і toUpperCase() повернуть новий рядок у відповідному регістрі, не змінюючи оригінальний.

const BRAND_NAME = "SAMSUNG";
const userInput = "saMsUng";
const normalizedToUpperCaseInput = userInput.toUpperCase();

console.log(userInput); // 'saMsUng'
console.log(userInput === BRAND_NAME); // false
console.log(normalizedToUpperCaseInput); // 'SAMSUNG'
console.log(normalizedToUpperCaseInput === BRAND_NAME); // true

// ----------------------------------------------

Метод indexOf()​

Повертає позицію (індекс), на якій знаходиться перший збіг підрядка або -1, якщо нічого не знайдено.

const message = "Welcome to Bahamas!";
console.log(message.indexOf("to")); // 8
console.log(message.indexOf("hello")); // -1

// ----------------------------------------------

Метод includes()​

Перевіряє, чи міститься підрядок в рядку, повертає буль - true, якщо міститься, і false - в іншому випадку. 
Регістр символів в рядку і підрядку має значення, оскільки, наприклад, літера "a" не дорівнює літері "А".

const productName = "Ремонтний дроїд";

console.log(productName.includes("н")); // true
console.log(productName.includes("Н")); // false
console.log(productName.includes("дроїд")); // true
console.log(productName.includes("Дроїд")); // false
console.log(productName.includes("Ремонтний")); // true
console.log(productName.includes("ремонтний")); // false

// ----------------------------------------------

ЦІКАВО

Усі методи рядків чутливі до регістру.

Метод endsWith()​

Дозволяє визначити, чи завершується рядок символами (підрядком), зазначеними в дужках, повертаючи true або false.

const jsFileName = "script.js";
console.log(jsFileName.endsWith(".js")); // true

const cssFileName = "styles.css";
console.log(cssFileName.endsWith(".js")); // false

// ----------------------------------------------

Методи replace() і replaceAll()​

Повертає новий рядок, в якому перше (replace) або усі збіги (replaceAll) підрядка замінені на вказане значення.

const jsFileName = "script.js";
const minifiedJsFileName = jsFileName.replace(".js", ".min.js");
console.log(minifiedJsFileName); // "script.min.js"

const cssFileNames = "styles.css, about.css, portfolio.css";
const minifiedCssFileNames = cssFileNames.replaceAll(".css", ".min.css");
console.log(minifiedCssFileNames); // "styles.min.css, about.min.css, portfolio.min.css"

// ----------------------------------------------

! Метод slice()​

Метод рядків slice (startIndex, endIndex) використовується для створення копії частини або всього рядка. 
Він робить копію елементів рядка від startIndex і до, але не включно endIndex і повертає новий рядок, не змінюючи оригінал.

const productName = "Repair droid";
console.log(productName.slice(0, 4)); // "Repa"
console.log(productName.slice(3, 9)); // "air dr"
console.log(productName.slice(0, productName.length)); // "Repair droid"
console.log(productName.slice(7, productName.length)); // "droid"

|============================
*/

// ========== Модуль-1 Занятие-2 ==========
// ________________________________________

//  * Напиши скрипт выбора стоимости отеля по кол-ву звёзд.
//  * 1 - 20$, 2 - 30$, 3 - 50$, 4 - 70$, 5 - 120$
//  *
//  * Если в переменной stars что-то кроме чисел 1-5, выведи строку
//  * 'Такого кол-ва звезд нет'

/** Решение
|============================

const stars = 2;
let price;

// --- else...if ---
// _________________

if (stars === 1) {
  price = 20;
} else if (stars === 2) {
  price = 30;
} else if (stars === 3) {
  price = 50;
} else if (stars === 4) {
  price = 70;
} else if (stars === 5) {
  price = 120;
} else {
  console.log('Такого кол-ва звезд нет');
}
console.log(price);

// --- switch ---
// _________________

switch (stars) {
  case 1:
    price = 20;
    console.log('Стоимость 1й звезды');
    break;

  case 2:
    price = 30;
    console.log('Стоимость 2х звезд');
    break;

  case 3:
    price = 50;
    break;

  case 4:
    price = 70;
    break;

  case 5:
    price = 120;
    break;

  default:
    console.log('Такого кол-ва звезд нет');
}
console.log(price);
|============================
*/

// =======================================================

//  * Напиши скрипт выбора стоимости отеля по кол-ву звёзд.
//  * 1,2 - 20$, 3,4 - 30$, 5 - 120$

/** Решение
|============================

const stars = 5;
let price;

// --- else...if ---
// _________________

if (stars === 1 || stars === 2) {
  price = 20;
} else if (stars === 3 || stars === 4) {
  price = 30;
} else if (stars === 5) {
  price = 120;
} else {
  console.log('Такого кол-ва звезд нет');
}
console.log(price);

// --- switch ---
// _________________

switch (stars) {
  case 1:
  case 2:
    price = 20;
    break;

  case 3:
  case 4:
    price = 30;
    console.log('Стоимость 2х звезд');
    break;

  case 5:
    price = 120;
    break;

  default:
    console.log('Такого кол-ва звезд нет');
}
console.log(price);

|============================
*/

// =======================================================

//  * Напиши скрипт выбора опции доставки товара.
//  * Опция хранится в переменной option: 1 - самовывоз, 2 - курьер, 3 - почта
//  *
//  * В переменную message записать сообщение в зависимости от опции.
//  * - 'Вы сможете забрать товар завтра с 12:00 в нашем офисе'
//  * - 'Курьер доставит заказ завтра с 9:00 до 18:00'
//  * - 'Посылка будет отправлена сегодня'
//  * - 'Вам перезвонит менеджер'

// Наши действия.
//  1. сделать переменные
// 2. сделать switch 1 2 3
// 3. в каждом кейсе записать в message строку
// 4. сделать лог message

/** Решение
|============================

const option = 2;
let message = ' ';

switch (option) {
  case 1:
    message = 'Вы сможете забрать товар завтра с 12:00 в нашем офисе';
    break;
  case 2:
    message = 'Курьер доставит заказ завтра с 9:00 до 18:00';
    break;
  case 3:
    message = 'Посылка будет отправлена сегодня';
    break;

  default:
    message = 'Вам перезвонит менеджер';
}

console.log(message);

|============================
*/

// =======================================================

//  * Цикл for

// for (let i = 0; условие; пост - выражение) {
// }
// --------------
// Плюсуем счетчик итерации <
// for (let i = 0; i < 10; i += 1) {
//   console.log(i);
// }

// Плюсуем счетчик итерации <=
// for (let i = 5; i <= 10; i += 1) {
//   console.log(i);
// }

// Плюсуем счетчик итерации <= i += 2
// for (let i = 5; i <= 10; i += 2) {
//   console.log(i);
// }

// Минусуем счетчик итерации >=
// for (let i = 10; i >= 0; i -= 1) {
//   console.log(i);
// }
// --------------
// Запись счетчика
// i += 3   (это тоже самое что: i = i + 3)
// --------------

//  * Напиши скрипт который подсчитывает общую сумму зарплат работников.
//  * Кол-во работников хранится в перемнной employees.
//  * Зарплата каждого работника это случайное число от 500 до 5000
//  * Записать сумму в переменную totalSalary и вывести в консоль

// Наши действия
// 1 сделать вары
// 2 перебрать работников в цикле
// 3 сгенерить случайную зп
// 4 прибавить к тоталу
// 5 лог

/** Решение
|============================

const minSalary = 500;
const maxSalary = 5000;
const employees = 4;
let totalSalary = 0;

for (let i = 1; i <= 4; i += 1) {
}

for (let i = 1; i <= employees; i += 1) {
  const salary = Math.round(
    Math.random() * (maxSalary - minSalary) + minSalary
  );
  console.log(`ЗП работника ${i} - ${salary}`);

  totalSalary += salary;
}

console.log('totalSalary: ', totalSalary);

|============================
*/

// ==========================================================================

//  * Напиши скрипт который подсчитывает сумму всех чётных чисел,
//  * которые входят диапазон чисел в переменных от min до max.
//  * Например, если min=0 и max=5, то диапазон 0-5, и в нём два чётных числа - 2 и 4, их сумма 6.

// Наши действия
// 1 вары
// 2 фор от min до max с шагом в 1
// проверяем остаток от деления
// пишем в сумму

/** Решение
|============================

const min = 0;
const max = 5;
let total = 0;

// ----- Первый вариант ---------------

for (let i = min; i <= max; i += 1) {
//   console.log(i);
  if (i % 2 === 0) {
    // console.log('четное число: ', i);
    total += i;
  }
}

console.log(`сумма чётных чисел от ${min} до ${max} равна`, total);

// ----- Второй вариант (называется "логика от обратного") ---------------

for (let i = min; i <= max; i += 1) {
  if (i % 2 !== 0) {
    // console.log('Не четное число: ', i);
    continue;
  }
  //   console.log('четное число: ', i);
  total += i;     // total += i; (это аналог) total = total + i;
}

console.log(`сумма чётных чисел от ${min} до ${max} равна`, total);

|============================
*/

// ==========================================================================

//  * Напиши скрипт обработки покупки в магазине.
//  *
//  * - Баланс пользователя хранится в переменной balance
//  * - Сумма покупки хранится в переменной payment
//  *
//  * - Перед проверкой вывести сообщение:
//  * «Общая стоимость заказа [число] кредитов. Проверяем кол-во доступных средств на счету»
//  *
//  * - Если сумма покупки не превышает баланс:
//  *    - Вычесть из баланса сумму покупки
//  *    - Вывести сообщение «На счету осталось [число] кредитов»
//  * - Если сумма покупки превышает баланс:
//  *    - Вывести сообщение «На счету недостаточно средств для проведения операции!»
//  * - В конце вывести сообщение «Операция завершена»

/** Решение
|============================

let balance = 10000;
const payment = 2000;

console.log(
  `Общая стоимость заказа ${payment} кредитов. Проверяем кол-во доступных средств на счету`
);

if (balance >= payment) {
  console.log('ok');

  balance -= payment; // balance = balance - payment (От баланса отнять payment)

  console.log('Все хорошо, снимаем деньги... Спасибо за покупку!');
  console.log(`На счету осталось ${balance} кредитов`);
} else {
  console.log('На счету недостаточно средств для проведения операции!');
}

console.log('Операция завершена');

|============================
*/

// ==========================================================================

//  * Напиши скрипт подсчёта суммы покупки со скидкой в зависимости
//  * от потраченной суммы за всё время (партнёрская программа).
//  *
//  * - Общая сумма потраченного хранится в переменной totalSpent
//  * - Сумма текущего платежа хранится в переменной payment
//  * - Скидка хранится в переменной discount
//  *
//  * - Если потрачено от [100 до 1000) - бронзовый партнёр, скидка 2%
//  * - Если потрачено от [1000 до 5000) - серебрянный партрёр, скидка 5%
//  * - Если потрачено больше [5000 - золотой партрёр, скидка 10%
//  * - Если потрачено меньше 100) - не партнёр, скидка 0%
//  *
//  * - В результате вывести сообщение
//  * «Оформляем заказ на сумму [сумма] со скидкой [скидка]%»

/** Решение
|============================

let totalSpent = 5000;
let payment = 500;
let discount = 0;

if (totalSpent >= 100 && totalSpent < 1000) {
  console.log('Бронзовый партнёр, скидка 2%');
  discount = 0.02;
} else if (totalSpent >= 1000 && totalSpent < 5000) {
  console.log('Серебрянный партрёр, скидка 5%');
  discount = 0.05;
} else if (totalSpent >= 5000) {
  console.log('Золотой партрёр, скидка 10%');
  discount = 0.1;
} else {
  console.log('Не партнёр, скидка 0%');
}

payment -= payment * discount;

console.log(
  `Оформляем заказ на сумму ${payment} со скидкой ${discount * 100}%`
);

totalSpent += payment;
console.log(`Общая сумма потраченого в магазине: ${totalSpent}`);

|============================
*/

// ==========================================================================

// const btnAdd = document.querySelector('button[data-add]');
// // btnAdd.textContent = 'button'  ----- текст для кнопки через JS
// const resetBtn = document.querySelector('button[data-reset]');
// const valueInput = document.querySelector('input[data-value]');
// const outputEl = document.querySelector('.js-output span');

// let total = 0;

// btnAdd.addEventListener('click', function () {
//   const value = Number(valueInput.value);

//   total += value;
//   outputEl.textContent = total;
//   valueInput.value = '';
// });

// resetBtn.addEventListener('click', function () {
//   total = 0;
//   outputEl.textContent = total;
// });

// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// ==========================================================================
// Oleh модуль-1 занятие 1
// ==========================================================================

/** Example 1 - Математичні оператори
|============================

// # ->
// Example 1 - Математичні оператори
// Виведи на екран загальну кількість яблук та винограду.
// Різницю яблук та винограду.

const apples = 47;
const grapes = 135;
const total = apples + grapes;
console.log(total);
const diff = apples - grapes;
console.log(diff);

|============================
*/

// ==========================================================================

/** Example 2 - Комбіновані оператори
|============================

// # ->
// Example 2 - Комбіновані оператори
// Заміни вираз перевизначення комбінованим оператором +=.

let students = 100;
students = students + 50;
students += 50;
students *= 50;
students /= 50;
students -= 50;
console.log(students);

|============================
*/

// ==========================================================================

/** Example 3 - Пріоритет операторів
|============================

// # ->
// Example 3 - Пріоритет операторів
// Розбери пріоритет операторів в інструкції привласнення значення змінної result.

const result = 108 + (223 - 2) * 5;
console.log(result);

|============================
*/

// ==========================================================================

/** Example 4 - Клас Math
|============================

// # ->
// Example 4 - Клас Math
// Напиши скрипт, який виводить у консоль заокруглені значення змінної value.
// Використовуй методи Math.floor(), Math.ceil() та Math.round().
// Перевір що буде в консолі при значеннях 27.3 та 27.9.

const value = Math.round(27.1);

console.log(value);

|============================
*/

// ==========================================================================

/** Example 5 - Шаблонні рядки
|============================

// # ->
// Example 5 - Шаблонні рядки
// Склади фразу за допомогою шаблонних рядків A has B bots in stock,
// де A, B - змінні вставлені в рядок.

const companyName = 'Cyberdyne Systems';
const repairBots = 150;
const defenceBots = 50;
const message = `${companyName} has ${repairBots + defenceBots} bots in stock`;
console.log(message); // "Cyberdyne Systems has 200 bots in stock"

|============================
*/

// ==========================================================================

// # ->
// Example 6 - Методи рядків та чейнінг
// Напиши скрипт, який розраховує індекс маси тіла людини.
// Для цього необхідно розділити вагу в кілограмах на квадрат висоти людини у метрах.
// Вага та висота зберігаються у змінних weight та height,
// але не як числа, а в вигляді рядків (спеціально для завдання).
// Не цілі числа можуть бути задані у вигляді 24.7 або 24,7,
// тобто як роздільник дробової частини може бути кома.

// Індекс маси тіла необхідно округлити до однієї цифри після коми;

/** Решение
|============================
let weight = "88,3";
let height = "1.75";

const parcedWeight = parseFloat(weight.replace(",", "."));
const parcedHeight = parseFloat(height.replace(",", "."));

const bmi = Math.round((parcedWeight / parcedHeight ** 2) * 10) / 10;
console.log(bmi); // 28.8
|============================
*/

// ==========================================================================

/** Example 7 - Оператори порівняння та приведення типів
|============================

// # ->
// Example 7 - Оператори порівняння та приведення типів
// Яким буде результат виразів?

// console.log(5 > 4);

// console.log(10 >= '7');

// console.log("12" > "13");
// "2" => 50 > "1" => 49 -> 50 > 49

// console.log("2" < "12");

// console.log('h'.charCodeAt());   // 104 Юникод

// console.log("Oleh" > "Ivan");

// console.log("4" == 4);

// console.log("6" === 6);

// console.log('false' === false);

// console.log(1 === true);

// console.log("0" == false);

// console.log("0" === false);

// console.log("Papaya" === "papaya");

// console.log(undefined == null);

// console.log(undefined === null);

// const x = 10;
// const y = 10;

// console.log(x >= y); // false
// console.log(x < y); // 10 < 16 -> true
// // null >= 0; true
// // null < 0; false

|============================
*/

// ==========================================================================

/** Example 8 - Логічні оператори
|============================

// # ->
// Example 8 - Логічні оператори
// Яким буде результат виразів?

console.log(10 > 20 || 6 < 10);

// && -> повертає те що не справдилось або останнє те що справдилось
// || -> повертає те що справдилось або останнє те що не справдилось

const res = 0 || "" || null;
console.log(res);

console.log(true && 3);

console.log(false && 3);

console.log(true && 4 && "kiwi");

console.log(true && 0 && "kiwi");

console.log(true || 3);

console.log(true || 3 || 4);

console.log(true || false || 7);

console.log(null || 2 || undefined);

console.log((1 && null && 2) > 0);

console.log(null || (2 && 3) || 4);

const name = "Oleh";
const nickName = "ZAETS";

const uiName = nickName || name || "Default";

console.log(uiName);

|============================
*/

// ==========================================================================

// # ->
// Example 9 - Значення за замовчуванням та оператор нульового злиття
// Отрефактори код так, щоб у змінну value присвоювалося значення змінної incomingValue,
// якщо воно не рівне undefined або null.
// В іншому випадку має присвоюватися значення defaultValue.
// Перевір роботу скрипта для наступних значень змінної incomingValue:
//      null, undefined, 0, false.
// Використовуй оператор ?? (nullish coalescing operator).

/** Решение
|============================
const age = undefined; // 0, "", false
const defaultAge = 10;
const value = age ?? defaultAge;
console.log(value);
|============================
*/

// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// ==========================================================================
// Oleh модуль-1 занятие 2
// ==========================================================================

/** QUESTIONS ==> <== QUESTIONS
|============================

if (false) {
  console.log("IT'S TRUE");
}

if (0) {
  console.log("WDpwidjwoud");
} else {
  console.log("HELLO ");
}

console.log(0 ? "WDpwidjwoud" : "HELLO");

const condition = "HELLO" || "WORLD";

console.log(condition ? "H" : "W");

const role = "admin";

switch (role) {
  case "admin":
    console.log("IS admin");
    break;
  case "user":
    console.log("IS user");
    break;
  default:
    console.log("Role is absent");
    break;
}

if (role === "admin") {
  console.log("IS admin");
}
if (role === "user") {
  console.log("IS user");
}
if (!role) {
  console.log("Role is absent");
}

&& - [operand] i [operand] => true; false; false;
|| - [operand] або [operand] => true; true; false

const isGood = true && "Awidhwhdw" && 1232; // 1232
const isGood2 = Boolean("Ivan") === false && Boolean("Petro") === true; // false
const isGood3 = false || false || false || 0; // 0
const isGood4 = Boolean("Ivan") === false || Boolean("Petro") === false; // false

const and = "Hello" && "wdwdwd" && 10 && true && 1;
const or = "" || "awdwhd" || 0 || "NEIODN" || undefined;

console.log(and, or);

for (let i = 0; i < 0; i += 1) {
  console.log("HELLO");
  console.log(i);
}

|============================
*/

// ==========================================================================

// Модуль 1. Заняття 2. Розгалуження. Цикли

// ==========================================================================

// # ->
// Example 1 - Введення користувача та розгалуження
// Використовуючи конструкцію if..else та prompt, напиши код, який питатиме:
// "Яка офіційна назва JavaScript?".
// Якщо користувач вводить "ECMAScript", то показуй alert з рядком "Правильно!",
// в іншому випадку - "Не знаєте? ECMAScript!"

/** Решение
|============================

alert("Do you 18");
const name = prompt("Enter your name");
const answer = confirm("Do you have 18?");

const response = prompt("Яка офіційна назва JavaScript?");

if (response === "ECMAScript") {
  console.log("Правильно!");
} else {
  console.log("Не знаєте? ECMAScript!");
}

alert(response === "ECMAScript" ? "Правильно!" : "Не знаєте? ECMAScript!");

|============================
*/

// ==========================================================================

// # ->
// Example 2 - Відображення часу (if...else)
// Напиши скрипт для відображення годин та хвилин у консолі браузера у форматі "".14 г. 26 хв.
// Якщо значення змінної minutes дорівнює 0, то виводь рядок "14 г.", без хвилин.

/** Решение
|============================

// вар-1 ------------------

const hours = 14;
const minutes = 10;
let info = `${hours} hr.`;

if (minutes) {
  info += ` ${minutes} m.`;
}

console.log(info);

// вар-2 ------------------

if (minutes <= 0) {
  console.log(info);
} else {
  info += `${minutes} m.`;
  console.log(info);
}

// вар-3 ------------------

console.log(minutes <= 0 ? info : (info += `${minutes} m.`));

|============================
*/

// ==========================================================================

// # ->
// Example 3 - Розгалуження
// Напиши скрипт, який виводить у консоль рядок "Це позитивне число",
// якщо у prompt користувач ввів число більше нуля.
// Якщо було введено нуль, виводь в консоль рядок "Це нуль".
// Якщо передали від'ємне число, у консолі повинен бути рядок "Це негативне число".

// const userInput = prompt("Введіть число");

/** Решение
|============================

const userInput = Number(prompt("Введіть число"));

if (userInput > 0) {
  console.log("Це позитивне число");
} else if (userInput === 0) {
  console.log("Це нуль");
} else if (userInput < 0) {
  console.log("Це негативне число");
} else {
  console.log("Це не число");
}

|============================
*/

// ==========================================================================

// # ->
// Example 4 - Вкладені розгалуження
// Напиши скрипт, який порівнює числа у змінних a та b.
// Якщо обидва значення більше 100, то виведи в консоль максимальне з них.
// В протилежному випадку у консолі повинна бути сума значення b та числа 512.

// const a = 120;
// const b = 180;

/** Решение
|============================

const a = 120;
const b = 80;

// вариант-1 ----------------

if (a > 100 && b > 100) {
  const max = a > b ? a : b;
  console.log(max);
} else {
  console.log(b + 512);
}

// вариант-2 ----------------

if (a > 100 && b > 100) {
  const max = Math.max(a, b);
  console.log(max);
} else {
  console.log(b + 512);
}

// вариант-3 ----------------

console.log(a > 100 && b > 100 ? (a > b ? a : b) : b + 512);

// вариант-4 ----------------

const a = 120;
const b = 180;
let res;

if (a > 100 && b > 100) {
  const max = Math.max(a, b);
  console.log(max);
} else {
  res = b + 512;
  console.log(res);
}

|============================
*/

// ==========================================================================

// # ->
// Example 5 - Форматування посилання (endsWith)
// Напиши скрипт, який перевіряє чи закінчується значення змінної link символом /.
// Якщо ні, додай до кінця значення link цей символ "/".
// Використовуй конструкцію if...else.

// let link = "https://my-site.com/about";

/** Решение
|============================

let link = "https://my-site.com/about";

// вариант-1 ----------------

if (link[link.length - 1] !== "/") {
  link += "/";
}
console.log(link);

// вариант-2 ----------------

if (!link.endsWith("/")) {
  link += "/";
}
console.log(link);

|============================
*/

// ==========================================================================

// # ->
// Example 6 - Форматування посилання (includes та логічне «І»)
// Напиши скрипт, який перевіряє чи закінчується значення змінної link символом /.
// Якщо ні, додай до кінця значення link цей символ, але тільки в тому випадку, якщо в link є підрядок "my-site".
// Використовуй конструкцію if...else.

// let link = 'https://my-site.com/about';

/** Решение
|============================
let link = "https://my-site.com/about";

if (!link.endsWith("/") && link.includes("my-site")) {
  link += "/";
}
console.log(link);
|============================
*/

// ==========================================================================

// # ->
// Example 7 - Форматування посилання (тернарний оператор)
// Виконай рефакторинг коду задачі номер 6, використовуючи тернарний оператор.

/** Решение
|============================
let link = "https://my-site.com/about";

link += !link.endsWith("/") && link.includes("my-site") ? "/" : "";

console.log(link);
|============================
*/

// ==========================================================================

// # ->
// Example 8 - if...else та логічні оператори
// Напиши скрипт який виводитиме в консоль браузера рядок залежно від значення змінної hours.
// Якщо значення змінної hours: менше 17, виводь рядок "Pending"
// Якщо більше або дорівнює 17 і менше або дорівнює 24, виводь рядок "Expires"
// більше 24 , виводь рядок "Overdue"

// const hours = 10;

/** Решение
|============================

const hours = 28;

// вариант-1 ----------------

if (hours < 17) {
  console.log('Pending');
} else if (hours >= 17 && hours <= 24) {
  console.log('Expires');
} else if (hours > 24) {
  console.log('Overdue');
}

// вариант-2 ----------------

if (hours < 17) {
  console.log('Pending');
} else if (hours >= 17 && hours <= 24) {
  console.log('Expires');
} else {
  console.log('Overdue');
}

// вариант-3 ----------------

if (hours < 17) {
  console.log("Pending");
} else if (hours > 24) {
  console.log("Overdue");
} else {
  console.log("Expires");
}

|============================
*/

// ==========================================================================

// # ->
// Example 9 - Дедлайн здачі проекту (if...else)
// Напиши скрипт для відображення часу дедлайну здачі проекту.
// Використовуй конструкцію if...else.
// Якщо до дедлайну 0 днів - виведи рядок "Сьогодні"
// Якщо до дедлайну 1 день - виведи рядок "Завтра"
// Якщо до дедлайну 2 дні - виведи рядок "Післязавтра"
// Якщо до дедлайну 3+ днів - виведи рядок "Дата у майбутньому"

// const daysUntilDeadline = 1;

/** Решение
|============================

const daysUntilDeadline = 1;

// вариант-1 ----------------

if (!daysUntilDeadline) console.log('Сьогодні');
else if (daysUntilDeadline === 1) console.log('Завтра');
else if (daysUntilDeadline === 2) console.log('Післязавтра');
else console.log('Дата у майбутньому');

// вариант-2 ----------------

if (!daysUntilDeadline) {
  console.log('Сьогодні');
} else if (daysUntilDeadline === 1) {
  console.log('Завтра');
} else if (daysUntilDeadline === 2) {
  console.log('Післязавтра');
} else {
  console.log('Дата у майбутньому');
}

// вариант-3 ----------------

if (daysUntilDeadline === 0) {
  console.log('Сьогодні');
} else if (daysUntilDeadline === 1) {
  console.log('Завтра');
} else if (daysUntilDeadline === 2) {
  console.log('Післязавтра');
} else {
  console.log('Дата у майбутньому');
}

|============================
*/

// ==========================================================================

// # ->
// Example 10 - Дедлайн здачі проекту (switch)
// Виконай рефакторинг коду задачі номер 5 використовуючи switch.

// const daysUntilDeadline = 3;

/** Решение
|============================

switch (daysUntilDeadline) {
  case 0:
    console.log("Сьогодні");
    break;
  case 1:
    console.log("Завтра");
    break;
  case 2:
    console.log("Післязавтра");
    break;
  default:
    console.log("Дата у майбутньому");
    break;
}

|============================
*/

// ==========================================================================

// # ->
// Example 11 - Цикл for
// Напиши цикл for, який виводить у консоль браузера числа за зростанням від min до max,
// але тільки якщо число кратне 5.

// const max = 100;
// const min = 20;

/** Решение
|============================
for (let i = min; i <= max; i += 1) {
  if (i % 5 === 0) {
    console.log(i);
  }
}
|============================
*/

// ==========================================================================

// # ->
// Example 12 - Введення користувача та розгалуження
// Напиши скрипт, який питатиме логін за допомогою prompt та логуватиме результат у консоль браузера.
// Якщо відвідувач вводить "Адмін", то prompt запитує пароль;
// Якщо нічого не введено або натиснуто клавішу Esc - вивести рядок "Скасовано";
// В іншому випадку вивести рядок "Я вас не знаю";

// Пароль перевіряти так:
// Якщо введено пароль "Я адмін", то вивести рядок "Здрастуйте!"
// Інакше виводити рядок "Невірний пароль"

// const login = prompt('Enter your login:');

/** Решение
|============================

// вариант-1 ----------------

const login = prompt('Enter your login:');

if (login === 'Admin') {
  alert('Admin');
  const password = prompt('Enter your password:');
  if (password === "I'm admin") {
    console.log('I know you');
  } else {
    console.log("I don't you");
  }
} else if (!login) {
  alert('Скасовано');
} else {
  alert('Я вас не знаю');
}

// вариант-2 ----------------

const login = prompt('Enter your login:');

if (login === 'Admin') {
  alert('Admin');
  const password = prompt('Enter your password:');
  const answer = `I ${password === "I'm admin" ? '' : "don't "}know you!`;
  console.log(answer);
} else if (!login) {
  alert('Скасовано');
} else {
  alert('Я вас не знаю');
}

// вариант-3 ----------------

const login = prompt('Enter your login:');

if (login === 'Admin') {
  alert('Admin');
  const password = prompt('Enter your password:');
  const answer = `I ${password === "I'm admin" ? '' : "don't "}know you!`;
  console.log(answer);
} else {
  alert(login ? 'Я вас не знаю' : 'Скасовано');
}

// вариант-4 Oleh ----------------

const login = prompt("Enter your login:");

if (login === "Admin") {
  alert("Admin!");
  const password = prompt("Enter your password:");
  const answer = `I ${password === "I'm admin" ? "" : "don't "}know you!`;
  console.log(answer);
} else {
  alert(login ? "I don't know you!" : "Calceled!");
}

const password = "I'm admin"; // "I'm admin" => true

// Шаблонные строки
const result = "I " + (password === "I'm admin" ? "" : "don't ") + "know you";
// console.log(result);
const result2 = `I ${password === "I'm admin" ? "" : "don't "}know you!`;

console.log(result2);

|============================
*/

// ==========================================================================

// ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// ==========================================================================
// Ярослав модуль-1 доп-занятие
// ==========================================================================

//TODO:===================================
// Якщо змінна a дорівнює 10, виведіть 'Вірно', інакше виведіть .

/** Решение
|============================

// вариант-1 ----------------

const a = 10;

let res = a === 10 ? 'Вірно' : 'Невірно';

console.log(res);

// вариант-2 ----------------

const a = 10;
let res = '';

if (a === 10) {
  res = 'Вірно';
} else {
  res = 'Невірно';
}
console.log(res);

// вариант-3 ----------------

const a = 10;

if (a === 10) {
  console.log('Вірно');
} else {
  console.log('Невірно');
}

|============================
*/

//TODO:===================================
// Змінна num може набувати 4 значення: 1, 2, 3 або 4. Якщо вона має
// значення '1', то у змінну result запишемо 'зима', якщо має значення
// '2' - 'весна' і так далі. Розв'яжіть завдання через switch-case.

/** Решение
|============================

// вариант-1 ----------------

const season = 1;
let result;

switch (season) {
  case 1:
    result = 'зима';
    break;
  case 2:
    result = 'весна';
    break;
  case 3:
    result = 'літо';
    break;
  case 4:
    result = 'осінь';
    break;
  default:
    result = 'Нет такого времени года';
}
console.log(result);

// вариант-2 ----------------

const season = 1;
let result = '';

if (season === 1) {
  result = 'зима';
} else if (season === 2) {
  result = 'весна';
} else if (season === 3) {
  result = 'літо';
} else if (season === 4) {
  result = 'осінь';
} else {
  result = 'Нет такого времени года';
}
console.log(result);

|============================
*/

//TODO:===================================
// Скористайтесь циклом while та виведіть у консоль числа від 0 до 50

/** Решение
|============================
let i;
const max = 50;

while (i <= max) {
  console.log(i);
  i += 1;
}
|============================
*/

//TODO:===================================
//Використовуючи конструкцію if...else,
//напишіть код, який запитуватиме:
//"Яка офіційна назва JavaScript?"
//Якщо користувач вводить "ECMAScript",
//показати через alert: "Вірно!"
//інакше відобразити: "Не знаєте? ECMAScript!"

// const question = prompt('Яка офіційна назва JavaScript?');

/** Решение
|============================

// вариант-1 ----------------

const question = prompt('Яка офіційна назва JavaScript?');

if (question === 'ECMAScript') {
  alert('Вірно!');
} else {
  alert('Не знаєте? ECMAScript!');
}

// вариант-2 ----------------

const question = prompt('Яка офіційна назва JavaScript?');

let user = question === 'ECMAScript' ? alert('Вірно!') : alert('Не знаєте? ECMAScript!');

// вариант-3 ----------------

const question =
  prompt('Яка офіційна назва JavaScript?') === 'ECMAScript'
    ? alert('Вірно!')
    : alert('Не знаєте? ECMAScript!');

|============================
*/

//TODO:===================================
// Напишіть програму, яка отримає від користувача
// число (кількість хвилин) і виведе у консоль
// рядок у форматі годин і хвилин
// 70 === 01:10
// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/padStart

/** Решение
|============================

// вариант-1 ----------------

let str = '70';
str = Number(str);
// console.log(typeof str);
let hours = Math.floor(str / 60);
let minutes = str % 60;

hours = String(hours).padStart(2, 0);
minutes = String(minutes).padStart(2, 0);

const time = `${hours}:${minutes}`;

console.log(time);

// вариант-2 ----------------

let str = '70';
str = Number(str);
// console.log(typeof str);
let hours = Number.parseInt(str / 60);
let minutes = str % 60;

hours = String(hours).padStart(2, 0);
minutes = String(minutes).padStart(2, 0);

const time = `${hours}:${minutes}`;

console.log(time);

// вариант-3 (Моё решение) ----------------

let userTime = Number(70);
let hours = Math.floor(userTime / 60);
let minutes = userTime % 60;

hours = String(hours).padStart(2, 0);
minutes = String(minutes).padStart(2, 0);

const result = `${hours}:${minutes}`;
console.log(result);

|============================
*/

//TODO:===================================
// Напишіть цикл, який виводить у консоль
// числа від max до min за спаданням

// const max = 50;
// const min = 23;

/** Решение
|============================

// вариант-1 ----------------

const max = 50;
const min = 23;
let total = 0;

for (let i = max; i >= min; i -= 1) {
  console.log(i);
  total = max - 1;
}


// вариант-2 ----------------

const max = 50;
const min = 23;

for (let i = max; i >= min; i -= 1) {
  console.log(i);
}

// вариан-3 (решение Михаил while)----

let max = 50;
const min = 23;
let isTrue = true;

while (isTrue) {
  console.log(max);
  max = max - 1;
  if (max < min) {
    isTrue = false;
  }
}

|============================
*/

//TODO:===================================
//За допомогою циклу for додайте всі парні числа від min до max

//const max = 50;
//const min = 23;

/** Решение
|============================

const max = 50;
const min = 23;
let sum = 0;

// вариант-1 ----------------

for (let i = min; i <= max; i += 1) {
  if (i % 2 === 0) {
    sum += i;
  }
}
console.log(sum);

// вариант-2 (расписанный)----

for (let i = min; i <= max; i += 1) {
  // console.log(i);

  if (i % 2 === 0) {
    console.log(`Парное число ${i}`);
    sum += i;
    console.log(`сумма каждого добавления ${sum}`);
  }
}
console.log(`Общая сумма ${sum}`);

|============================
*/

//TODO:===================================
// За допомогою циклу for виведіть парні числа від 2 до 10.

/** Решение
|============================

// вариант-1 ----------------

const min = 2;
const max = 10;

for (let i = min; i <= max; i += 1) {
  if (i % 2 === 0) {
    console.log(i);
  }
}

|============================
*/

//TODO:===================================
// Напишіть код, який запитуватиме
// логін за допомогою prompt і логуватиме результат в консоль браузера
// Якщо відвідувач вводить "Адмін", то prompt запитує пароль.
// Якщо нічого не ввели або натиснута клавіша Esc вивести рядок "Скасовано"
// Інакше вивести рядок "Я вас не знаю"
// Пароль перевіряти так:
// Якщо введено пароль "Я головний",
// то вивести рядок "Доброго дня!"
// інакше виводити рядок "Невірний пароль!"

/** Решение 
|============================

// вариант-1 ----------------

const userProfile = prompt('Введи логин');

if (userProfile === 'Адмін') {
  const userPassword = prompt('Введи пароль');
  if (userPassword === 'Я головний') {
    alert('Доброго дня!');
  } else {
    alert('Невірний пароль!');
  }
} else if (userProfile === null || userProfile === '') {
  alert('Скасовано');
} else {
  alert('Я вас не знаю');
}

// вариант-2 ----------------

const userAnswerLogin = prompt('Введи логин');

if (userAnswerLogin === 'Адмін') {
  const userAnswerPassword = prompt('Введи пароль');
  userAnswerPassword === 'Я головний'
    ? alert('Доброго дня!')
    : alert('Невірний пароль!');
} else if (userAnswerLogin === null || userAnswerLogin === '') {
  console.log('Скасовано');
} else {
  console.log('Я вас не знаю');
}

|============================
*/

/** Решение Олег
|============================

// вариант-1 ----------------

const login = prompt('Enter your login:');

if (login === 'Admin') {
  alert('Admin');
  const password = prompt('Enter your password:');
  if (password === "I'm admin") {
    console.log('I know you');
  } else {
    console.log("I don't you");
  }
} else if (!login) {
  alert('Скасовано');
} else {
  alert('Я вас не знаю');
}

// вариант-2 ----------------

const login = prompt('Enter your login:');

if (login === 'Admin') {
  alert('Admin');
  const password = prompt('Enter your password:');
  const answer = `I ${password === "I'm admin" ? '' : "don't "}know you!`;
  console.log(answer);
} else if (!login) {
  alert('Скасовано');
} else {
  alert('Я вас не знаю');
}

// вариант-3 ----------------

const login = prompt('Enter your login:');

if (login === 'Admin') {
  alert('Admin');
  const password = prompt('Enter your password:');
  const answer = `I ${password === "I'm admin" ? '' : "don't "}know you!`;
  console.log(answer);
} else {
  alert(login ? 'Я вас не знаю' : 'Скасовано');
}

// вариант-4 Oleh ----------------

const login = prompt("Enter your login:");

if (login === "Admin") {
  alert("Admin!");
  const password = prompt("Enter your password:");
  const answer = `I ${password === "I'm admin" ? "" : "don't "}know you!`;
  console.log(answer);
} else {
  alert(login ? "I don't know you!" : "Calceled!");
}

const password = "I'm admin"; // "I'm admin" => true

// Шаблонные строки
const result = "I " + (password === "I'm admin" ? "" : "don't ") + "know you";
// console.log(result);
const result2 = `I ${password === "I'm admin" ? "" : "don't "}know you!`;

console.log(result2);

|============================
*/

//TODO:===================================
//При завантаженні сторінки користувачеві пропонується в prompt ввести число.
//Введення додається до значення змінної total.
//Операція введення числа триває до того часу, поки користувач не натисне кнопку Cancel в prompt.
//Після того, як користувач припинив введення натиснувши на кнопку Cancel,
//показати alert з рядком "Загальна сума введених чисел дорівнює [число]."
//Робити перевірку,що користувач ввів саме число, а не довільний набір символів, не потрібно.
//Використайте цикл while

/** Решение
|============================

// вариант-1 ----------------

let check = true;
let total = 10;
let num = Number(prompt('Введите число'));

while (check) {
  if (num) {
    total += num;
    num = Number(prompt('Введите число'));
  } else {
    check = false;
    console.log(`Загальна сума введених чисел дорівнює ${total}.`);
  }
}

// вариант-2 ----------------

let num;
let total = 0;

do {
  num = Number(prompt('Введите число'));
  total += num;
} while (num);

alert(`Загальна сума введених чисел дорівнює ${total}.`);

|============================
*/

//TODO:===================================
//Напишіть цикл, який пропонує ввести число більше 100 через prompt.
//Якщо відвідувач ввів інше число - попросити ввести ще раз і так далі.
//Цикл має питати число, поки відвідувач не
//введе число більше 100, або натисне кнопку скасування в prompt
// Передбачається, що відвідувач вводить лише числа.

/** Решение
|============================

// вариант-1 (Мой вариант) -------

const number = 100;
let userNumber = 50;

do {
  userNumber = Number(prompt(`Введи число більше ${number}`));

  if (!userNumber) {
    alert('Скасовано!');
  } else if (userNumber <= number) {
    userNumber = Number(prompt(`Введи число більше ${number}`));
  } else {
    alert('Ви ввели число більше ста');
  }
} while (userNumber < number && userNumber);

|============================
*/

//TODO:===================================
// У змінній min лежить число від 0 до 59.
// Визначте, в яку чверть години потрапляє
// це число(у першу, другу, третю чи четверту).

/** Решение
|============================

// вариант-1 (Мой вариант) -------

let type = 15;

if (type <= 15) {
  console.log('Перша чверть години');
} else if (type > 15 && type <= 30) {
  console.log('Друга чверть години');
} else if (type > 30 && type <= 45) {
  console.log('Третя чверть години');
} else if (type > 45 && type <= 60) {
  console.log('Четверта чверть години');
} else {
  console.log('Більше години');
}

|============================
*/

//TODO:===================================
// Даний рядок, що складається із символів, наприклад, 'abcde'.
// Перевірте, що першим символом цього рядка є буква 'a'.
// Якщо це так - виведіть 'так', інакше виведіть 'ні'.

/** Решение
|============================

const string = 'abcde';

// вариант-1 (Мой вариант) --------

if (string[0] === 'a') {
  alert('Так');
} else {
  alert('Ні');
}

// вариант-2 (Мой вариант) -------

string[0] === 'a' ? console.log('Так') : console.log('Ні');

|============================
*/

//TODO:===================================
// Якщо число ділитися на 3 повертати fizz
// якщо ділитися на 5 повертати buzz
// Якщо ділитися на 3 і на 5 повернути fizzbuzz
// let num;
// fizzBuzz(24);
// function fizzBuzz() {
//   if (fizzBuzz / 3 === 0) {
//     console.log('fizz');
//   } else if (fizzBuzz / 5 === 0) {
//     console.log('buzz');
//   } else if (fizzBuzz / 3 === 0 && fizzBuzz / 5 === 0) {
//     console.log('fizzbuzz');
//   }
// }
// console.log(fizzBuzz(24));

/** Решение
|============================
// fizzBuzz(24);
// function fizzBuzz(num) {
// }

// вариант-1 (Мой вариант) --------



// вариант-2 (Мой вариант) -------



|============================
*/

//TODO:===================================
// Напишіть if..else, що відповідає наступному switch:

// switch (browser) {
//   case 'Edge':
//     alert( "You've got the Edge!" );
//     break;

//   case 'Chrome':
//   case 'Firefox':
//   case 'Safari':
//   case 'Opera':
//     alert( 'Okay we support these browsers too' );
//     break;

//   default:
//     alert( 'We hope that this page looks ok!' );
// }

/** Решение
|============================

// switch (browser) {
//   case 'Edge':
//     alert( "You've got the Edge!" );
//     break;

//   case 'Chrome':
//   case 'Firefox':
//   case 'Safari':
//   case 'Opera':
//     alert( 'Okay we support these browsers too' );
//     break;

//   default:
//     alert( 'We hope that this page looks ok!' );
// }

// вариант-1 (Мой вариант) --------

let browser = 'Chrome';

if (browser === 'Edge') {
  alert("You've got the Edge!");
} else if (
  browser === 'Chrome' ||
  browser === 'Firefox' ||
  browser === 'Safari' ||
  browser === 'Opera'
) {
  alert('Okay we support these browsers too');
} else {
  alert('We hope that this page looks ok!');
}

|============================
*/

//TODO:===================================
// Написати ф-цію, яка створює масив із зазначеною довжиною та наповнює його переданим значенням
// приклад: ф-ція fillArray(3, 'a') повинна повертати масив ['a', 'a', 'a']

//TODO:===================================
// Написати ф-цію, яка прибиратиме з масиву всі значення, які перетворюються на false
// undefined, null, false, '', 0, NaN
// const array = [1, 0, 54, "doc", null, "jpg", undefined, "", "png", "exe", false, "mp4", NaN, "hbs"];

//TODO:===================================
// Перевірити два масива і дізнатися, чи вони рівні за вмістом
// const arr1 = [1, 4, 6, "color", 324, 232, "list", 11, 9, "dream", 34, 0, -30];
// const arr2 = [6, "dream", -30, 11, 9, 1, 324, 34, "color", 4, 232, 0, "list"];

// const arr3 = [4, 232, 6, -30, "color", 324, "list", 1, 11, 9, "dream", 34, 0];
// const arr4 = ["color", 6, -30, 11, 9, 1, "dream", 324, 34, 4, 232, 0, "list"];

// const arr5 = [1, 4, 6, "color", "list", 11, 9, "dream", 34, 0, -30, "lesson"];
// const arr6 = [6, 324, "dream", -30, 9, 8, 34, "color", 4, 232, 0, "list", 11];

// const arr7 = [1, 4, 6, "color", 324, 232, "list", 11, 9, "dream", 34, 0, -30];
// const arr8 = [6, "dream", -30, 10, 9, 1, 324, 34, "color", 4, 232, 0, "list"];
//
