// _________________________________________________________________________________________
// |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
// =========================================================================================
// Репета модуль-3 занятие 1 Обьекты
// ==================================
/** Теория Обьекты Репета
|============================
// Что такое обьект.
const playlist = {
  name: 'Мой супер плейлист',
  rating: 5,
  tracks: ['трек-1', 'трек-2', 'трек-3'],
  trackCount: 3,
};

console.log(playlist);
// _______________________________________________________
// Литерал объекта. как его отличить от других сущьностей.

const x = {};                   // 1) Присваиваем литерал обьекта в переменную.

const fn = function (myObject) {
  console.log(myObject);
};

fn({ a: 1, b: 2 });             // 2) Передаем аргумент в функцию. Это тоже литерал объекта.

const rtfm = function () {
  return { a: 5 };              // 3) Возврат из функции. Тщ же литарал обьекта.
};

console.log(rtfm());
// _______________________________________________________
// Вазов объекта

const fn = function (myObject) {
  console.log(myObject);
};

fn({ a: 1, b: 2 });                // Вызов обьекта.

// Доступ к свойствам объекта.
// ---------------------------
// Обращение к свойству. 2-ва варианта (через точку и через ключ).

// 1й вариант через точку. // console.log(playlist.rating); // 5
// 2й вариант через ключь, ключ передаем как строку. // console.log(playlist['rating']); // 5

const playlist = {
  name: 'Мой супер плейлист',
  rating: 5,
  tracks: ['трек-1', 'трек-2', 'трек-3'],
  trackCount: 3,
};

console.log(playlist);               // {name: 'Мой супер плейлист', rating: 5, tracks: Array(3), trackCount: 3}
console.log(playlist.rating);        // 5  // (1й вариант)
console.log(playlist['rating']);     // 5  // (2й вариант)

console.log(playlist.name);                // Мой супер плейлист
console.log(playlist['name']);             // Мой супер плейлист

console.log(playlist.trackCount);         // 3
console.log(playlist['trackCount']);      // 3

console.log(playlist.tracks);             // ['трек-1', 'трек-2', 'трек-3']
console.log(playlist['tracks']);          // ['трек-1', 'трек-2', 'трек-3']

// ---------------
// Случаи когда имя свойства хранится в переменной.
const propertyName = 'tracks';

console.log(playlist.propertyName); // undefined // Такое свойство не найдено.
console.log(playlist[propertyName]); // ['трек-1', 'трек-2', 'трек-3']
console.log(playlist['tracks']); // ['трек-1', 'трек-2', 'трек-3']
// _______________________________________________________
// Бывают случаи когда нам нужно создать объект в котором ключ динамический.
// ---------------
//  * Короткая запись свойств (сокращение)

const username = 'Mango';
const email = 'mango@mail.com';

// ------- Вариант обычное.

const signupData = {
  username: username,
  email: email,
};

// ------- Вариант сокращение.

// Если имя свойства должно называться также как имя переменной в которой лежит это значение, то можно сократить.Пример ниже.

const signupData = {
  username,
  email,
};

console.log(signupData);
// _______________________________________________________

//  * Вычисляемые свойства

//  <input name="color" value="tomato" >

const inputName = 'color';
const inputValue = 'tomato';

// Запись в квадратных скобках [inputName] буквально говорит: иди найди переменную с таким именем и её значение используй как клуч.
const colorPickerData = {
  //   inputName: inputValue, // {inputName: 'tomato'}
  [inputName]: inputValue, // {color: 'tomato'}
};

console.log(colorPickerData);
// _______________________________________________________
// Добавление елементов в объект. Переопределение уже существующего свойства в объекте

const playlist = {
  name: 'Мой супер плейлист',
  rating: 5,
  tracks: ['трек-1', 'трек-2', 'трек-3'],
  trackCount: 3,
};

playlist.qwe = 5;       // Добавление свойства в объект.
playlist.rating = 10;   // Если свойство уже есть, то оно переопредилиться.

console.log(playlist);
// _______________________________________________________
//  * Ссылочный тип {} === {}

// console.log({ a: 1 } === { a: 1 }); // Это условие всегда будет возвращать 'false', так как JavaScript сравнивает объекты по ссылке, а не по значению.

// console.log([] === []); // Это условие всегда будет возвращать 'false', так как JavaScript сравнивает объекты по ссылке, а не по значению.

const a = { x: 1, y: 2 };
const b = a;

console.log(b === a); // true

a.hello = 100;
b.hello = 150;

console.log(a); // {x: 1, y: 2, hello: 150}
console.log(b); // {x: 1, y: 2, hello: 150}
// _______________________________________________________
// * Массивы и функции это объекты

const a = [1, 2, 3];

a.hello = ':)';

console.log(a);                   // [1, 2, 3, hello: ':)']

const fn = function () {
  console.log('hello');
};

fn.hello = ';)';

console.dir(fn.hello);           // ;)
// _______________________________________________________

|============================
*/
// ________________________________________________________________________________________
