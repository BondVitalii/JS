// :::::::::::::::||| –†–µ–ø–µ—Ç–∞ –º–æ–¥—É–ª—å-4 –∑–∞–Ω—è—Ç–∏–µ-1 Callback-—Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∑–∞–º—ã–∫–∞–Ω–∏—è. |||:::::::::::::::

/** Callback function, –∏–Ω–ª–∞–π–Ω –∫–æ–ª–±—ç–∫–∏. (—Ñ–∞–π–ª 01-callback –†–µ–ø–µ—Ç–∞ )
|============================
Callback-—Ñ—É–Ω–∫—Ü–∏–∏. —Ñ–∞–π–ª https://github.com/luxplanjay/js-22/blob/04-1-–∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü–∏–∏/js/01-callbacks.js

 * –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (callback)
 * - –§—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * - –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞–∑—ã–≤–∞–µ—Ç—Å
 *   ¬´—Ñ—É–Ω–∫—Ü–∏–µ–π –æ–±—Ä–∞—Ç–Ω–æ–≥–æ (–æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ) –≤—ã–∑–æ–≤–∞¬ª (callback-—Ñ—É–Ω–∫—Ü–∏—è)
 * - –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
 *   –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´—Ñ—É–Ω–∫—Ü–∏–µ–π –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞¬ª
 
const fnA = function (message, callback) {
  console.log(message);                                     // qweqwe

  console.log(callback);                                   // –≠—Ç–æ—Ç –ª–æ–≥ –≤–µ—Ä–Ω–µ—Ç –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏—é.
  callback(100);                                           // –í—ã–∑–æ–≤ –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏.
};

const fnB = function (number) {
  console.log('–≠—Ç–æ –ª–æ–≥ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ fnB', number);           // –≠—Ç–æ –ª–æ–≥ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ fnB 100
};

fnA('qweqwe', fnB);

// ------------------------------------------------------

// * —Ñ—É–Ω–∫—Ü–∏—è doMath(a, b, callback)

const doMath = function (a, b, callback) {
  const result = callback(a, b);

  console.log(result);                         // 5
};

const add = function (x, y) {
  return x + y;
};

doMath(2, 3, add);                             // –≤—ã–∑–æ–≤ doMath —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∫–æ–ª–±—ç–∫ —Ñ—É–Ω–∫—Ü–∏–∏ add

// ------------------------------------------------------

const doMath = function (a, b, callback) {
  const result = callback(a, b);

  console.log(result);                         // // –≤—ã–∑–æ–≤ add –≤–µ—Ä–Ω–µ—Ç 5. // –≤—ã–∑–æ–≤ sub –≤–µ—Ä–Ω–µ—Ç 2.
};

const add = function (x, y) {
  return x + y;
};

const sub = function (x, y) {
  return x - y;
};

doMath(2, 3, add);                           // –≤—ã–∑–æ–≤ doMath —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∫–æ–ª–±—ç–∫ —Ñ—É–Ω–∫—Ü–∏–∏ add
doMath(10, 8, sub);                          // –≤—ã–∑–æ–≤ doMath —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∫–æ–ª–±—ç–∫ —Ñ—É–Ω–∫—Ü–∏–∏ sub

// ------------------------------------------------------

// –ò–Ω–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü–∏–∏. (–í—Å—Ç—Ä–æ–µ–Ω–∞—è —Ñ—É–Ω–∫–∏—è - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è - –∞–Ω–æ–Ω–∏–º–Ω–∞—è).

const doMath = function (a, b, callback) {
  const result = callback(a, b);

  console.log(result); // // –≤—ã–∑–æ–≤ add –≤–µ—Ä–Ω–µ—Ç 5. // –≤—ã–∑–æ–≤ sub –≤–µ—Ä–Ω–µ—Ç 2.
};
// –ò–Ω–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü–∏—è.
doMath(2, 3, function (x, y) {
  return x + y;
});
// –ò–Ω–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü–∏—è.
doMath(10, 8, function (x, y) {
  return x - y;
});

// ------------------------------------------------------
// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã Callback-—Ñ—É–Ω–∫—Ü–∏—è–º–∏.
// ------------------------------------------------------

// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã Callback-—Ñ—É–Ω–∫—Ü–∏–∏ -1:

// * –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π. –ü—Ä–∏–º–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫–µ.

// html –∫–æ–¥ –∫–Ω–æ–ø–∫–∏.---------------
// <button class="js-button">
//   –≠—Ç–æ –∫–Ω–æ–ø–∫–∞
//   <span role="image" aria-label="–ò–∫–æ–Ω–∫–∞ –≤–æ–ª—à–µ–±–Ω–∏–∫–∞">üßô‚Äç‚ôÇÔ∏è</span>
// </button>;

const buttonRef = document.querySelector('.js-button'); // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É.

// –í–∞—Ä–∏–∞–Ω—Ç-1 -------------------------------
const handleBtnClick = function () {
  console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ ' + Date.now());
};
buttonRef.addEventListener('click', handleBtnClick); // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π.

// –ï—Å–ª–∏ —ç—Ç–æ—Ç 'click' —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º —Å–æ–±—ã—Ç–∏–µ–º event —á—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–æ–∏–∑–æ—à–ª–æ, –æ–Ω–∞ –±–µ—Ä–µ—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç callback() —Ñ—É–Ω–∫—Ü–∏—é (handleBtnClick);
// function addEventListener(eventType, callback) {
//   if (eventType == event) {
//     callback();
//   }
// }

// –í–∞—Ä–∏–∞–Ω—Ç-2 (—Å –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π) -------
buttonRef.addEventListener('click', function () {
  console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ ' + Date.now());
});

// ------------------------------------------------------

// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã Callback-—Ñ—É–Ω–∫—Ü–∏–∏-2:

// * –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è.



const onGetPositionSuccess = function (position) {
  console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ onGetPositionSuccess');
  console.log(position);
};

const onGetPositionError = function (error) {
  console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ onGetPositionError');
  console.log(error);
};

window.navigator.geolocation.getCurrentPosition(
  onGetPositionSuccess,
  onGetPositionError
);

// ------------------------------------------------------

// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã Callback-—Ñ—É–Ω–∫—Ü–∏–∏ -3: (–≤–∏–¥–µ–æ –º–æ–¥—É–ª—å-4-–∑–∞–Ω—è—Ç–∏–µ-1 35:44)

//  * –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã 

const callback = function () {
  console.log('–ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–ª–±–µ–∫–∞ –≤ —Ç–∞–π–º–∞—É—Ç–µ');
};

console.log('–í –∫–æ–¥–µ –ø–µ—Ä–µ–¥ —Ç–∞–π–º–∞—É—Ç–æ–º');
// setTimeout(callback, 2000);
console.log('–í –∫–æ–¥–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞');

// ------------------------------------------------------

// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã Callback-—Ñ—É–Ω–∫—Ü–∏–∏ -4: (–≤–∏–¥–µ–æ –º–æ–¥—É–ª—å-4-–∑–∞–Ω—è—Ç.-1 40:40)

//  * –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤: http-–∑–∞–ø—Ä–æ—Å  
//  * - API URL: https://pokeapi.co/api/v2/pokemon

const onRequestSuccess = function (response) {
  console.log('–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ onRequestSuccess –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –±–µ–∫–µ–Ω–¥–∞');
  console.log(response);
};

// fetch('https://pokeapi.co/api/v2/pokemon')
//     .then(res => res.json())
//     .then(onRequestSuccess);

// ------------------------------------------------------

// –ü—Ä–∏–º–µ—Ä: (–≤–∏–¥–µ–æ –º–æ–¥—É–ª—å-4-–∑–∞–Ω—è—Ç.-1 46:42)

//  * –§–∏–ª—å—Ç—Ä

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä, –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å–∏–≤–æ–≤. –ü–æ —É—Å–ª–æ–≤–∏—é —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞—Å–∏–≤.

const filter = function (array, test) {
  const filteredArray = [];

  for (const el of array) {
    console.log(el);
    const passed = test(el);

    if (passed) {
      filteredArray.push(el);
    }
  }

  return filteredArray;
};
// –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.
// 1. –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
// 2. —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
// 3. –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç true
// 3. –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –ù–ï —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω–µ—Ç false

const callback1 = function (value) {
  return value >= 3;
};

const r1 = filter([1, 2, 3, 4, 5], callback1);
console.log(r1);

const callback2 = function (value) {
  return value <= 4;
};

const r2 = filter([1, 2, 3, 4, 5, 6, 7, 8], callback2);
console.log(r2);

// ------------------------

// –ü—Ä–∏–º–µ—Ä: (–≤–∏–¥–µ–æ 57:32)

const filter = function (array, test) {
  const filteredArray = [];

  for (const el of array) {
    // console.log(el);
    const passed = test(el);

    if (passed) {
      filteredArray.push(el);
    }
  }

  return filteredArray;
};

const fruits = [
  { name: 'apples', quantity: 200, isFresh: true },
  { name: 'grapes', quantity: 150, isFresh: false },
  { name: 'bananas', quantity: 100, isFresh: true },
];

const getFruitsWithQuantity = function (fruit) {
  return fruit.quantity >= 120;
};

const r3 = filter(fruits, getFruitsWithQuantity);
console.log(r3);
|============================
*/
// ==========================================================================================
/** –ó–∞–º—ã–∫–∞–Ω–∏—è. (—Ñ–∞–π–ª 02-closures –†–µ–ø–µ—Ç–∞) 
|============================
// –ó–∞–º—ã–∫–∞–Ω–∏—è. (–≤–∏–¥–µ–æ 1:04:20) —Ñ–∞–π–ª 02-closures (https://github.com/luxplanjay/js-22/blob/04-1-–∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü–∏–∏/js/02-closures.js)

//  * –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é.
//  *
//  * –í–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
//  * –∫–æ –≤—Å–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º (–æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏)
//  * —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–π –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –µ—ë –≤–µ—Ä–Ω—É–ª–∏),
//  * —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´–∑–∞–º—ã–∫–∞–Ω–∏–µ¬ª.

const fnA = function (parameter) {
  const innerVariable = '–∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ fnA';

  const innerFunction = function () {
    console.log(parameter);
    console.log(innerVariable);
    console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ innerFunction');
  };

  return innerFunction;
};

const fnB = fnA(555);

fnB();

console.log(fnB);

// -------------------------------------------

// –ü—Ä–∏–º–µ—Ä-1 —Ä–∞–±–æ—Ç—ã –ó–ê–ú–´–ö–ê–ù–ò–Ø! (–≤–∏–¥–µ–æ 1:12:40)

//  * –ü–æ–≤–∞—Ä—ë–Ω–æ–∫

const makeDish = function (sheffName, dish) {
  console.log(`${sheffName} –≥–æ—Ç–æ–≤–∏—Ç ${dish}`);
};

makeDish('Mango', '–ø–∏—Ä–æ–∂–æ–∫');
makeDish('Mango', '–æ–º–ª–µ—Ç');
makeDish('Mango', '—á–∞–π');

makeDish('Poly', '–∫–æ—Ç–ª–µ—Ç—ã');
makeDish('Poly', '—Å—É–ø–∏–∫');
makeDish('Poly', '–∫–æ—Ñ–µ');

const makeSheff = function (name) {
  const innverVar = 555;
  const message = 'hello';

  const makeDish = function (dish) {
    console.log(message);
    console.log(innverVar);
    console.log(`${name} –≥–æ—Ç–æ–≤–∏—Ç ${dish}`);
  };

  return makeDish;
};

const mango = makeSheff('Mango');

// console.dir(mango);

mango('–∫–æ—Ç–ª–µ—Ç—ã');
mango('–ø–∏—Ä–æ–∂–æ–∫');

const poly = makeSheff('Poly');

// console.dir(poly);

poly('—á–∞–π');
poly('–æ–º–ª–µ—Ç');

// console.dir(mango);

// -------------------------------------------

// –ü—Ä–∏–º–µ—Ä-2 —Ä–∞–±–æ—Ç—ã –ó–ê–ú–´–ö–ê–ù–ò–Ø! (–≤–∏–¥–µ–æ 1:23:10)

//  * –û–∫—Ä—É–≥–ª—è—Ç–æ—Ä ü§∑‚Äç‚ôÇÔ∏è

const floatingPoint = 3.456789;
const someInt = Math.round(floatingPoint); // 3
const withDecimals = Number(floatingPoint.toFixed(2)); // 3.46

// ----- –ü—Ä–∏–º–µ—Ä –±–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏—è. -----

const rounder = function (number, places) {
  return Number(number.toFixed(places));
};

console.log(rounder(3.4567, 2));
console.log(rounder(3.4567, 3));
console.log(rounder(5.1234, 2));
console.log(rounder(3.4567, 3));

// ----- –ü—Ä–∏–º–µ—Ä —ç—Ç–æ—Ç-–∂–µ, –Ω–æ —Å –∑–∞–º—ã–∫–∞–Ω–∏–µ–º. -----

const rounder = function (places) {
  return function (number) {
    return Number(number.toFixed(places));
  };
};

const rounder2 = rounder(2);
const rounder3 = rounder(3);

// console.dir(rounder2);
// console.dir(rounder3);

console.log(rounder2(3.4567));
console.log(rounder2(5.4512312312367));
console.log(rounder3(3.4567));
console.log(rounder2(5.1234));
console.log(rounder3(3.4567));
console.log(rounder3(10.67667));

// --------------------------------

// –ü—Ä–∏–º–µ—Ä-3 —Ä–∞–±–æ—Ç—ã –ó–ê–ú–´–ö–ê–ù–ò–Ø! (–≤–∏–¥–µ–æ 1:30:55)

//  * –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ - —Å–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.

const salaryManagerFactory = function (employeeName, baseSalary = 0) {
  let salary = baseSalary;

  return {
    raise(amount) {
      if (amount > 1000) {
        return '–¢—ã –æ—Ñ–∏–≥–µ–ª?';
      }

      salary += amount;
    },
    lower(amount) {
      salary -= amount;
    },
    current() {
      return `–¢–µ–∫—É—â–∞—è –∑–∞—Ä–ø–∞–ª–∞—Ç–∞ ${employeeName} - ${salary}`;
    },
  };
};

const salaryManager = salaryManagerFactory('Mango', 5000);

console.log(salaryManager.current());

console.log(salaryManager.raise(10000000));

console.log(salaryManager.current());

// --------------------------------

const myLibFactory = function () {
    let value = 0;

    const add = function (num) {
        value += num;
    };

    return {
        add: add,
        getValue() {
            return value;
        },
    };
};

const myLib = myLibFactory();

console.dir(myLib.getValue);

console.log(myLib);
console.log(myLib.getValue());
myLib.add(10);
console.log(myLib.getValue());

|============================
*/
// ==========================================================================================
/** –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. (—Ñ–∞–π–ª 03-arrow-fns –†–µ–ø–µ—Ç–∞)
|============================
–°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. —Ñ–∞–π–ª 03-arrow-fns –†–µ–ø–µ—Ç–∞ (–≤–∏–¥–µ–æ –º-4-–∑-1 / 1:47:05) https://github.com/luxplanjay/js-22/blob/04-1-–∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü–∏–∏/js/03-arrow-fns.js

 * –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 * - –û–±—ä—è–≤–ª–µ–Ω–∏–µ
 * - –Ø–≤–Ω—ã–π –∏ –Ω–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
 * - –ê—Ä–≥—É–º–µ–Ω—Ç—ã
 * - –ù–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞

// ----------------------------------------------------------------------------
* –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ 2 –∏ –±–æ–ª—å—à–µ, —Ç–æ —Å–∫–æ–±–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å.

const add = (a, b, c) => {
};

* –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—Å–µ–≥–æ 1 —Ç–æ, —Ç–æ —Å–∫–æ–±–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.

const add = a => {
};

* –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ—Ç, —Ç–æ —Ç–æ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –ø—É—Å—Ç—ã–µ —Å–∫–æ–±–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

const add = () => {
};

// ---------------------

* –ï—Å–ª–∏ —É —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–µ–ª–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–æ–ª—å—à–µ —á–µ–º –æ–¥–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è. 
* –¢–æ —Ç–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å–ª–µ —Å—Ç—Ä–µ–ª–∫–∏ —Å—Ç–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ { } –∏ –∫–∞–∫–æ–π-—Ç–æ retur. –≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–Ø–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç".

const add = (a, b, c) => {
  console.log(a, b, c);
  return a + b + c;
};

* –ï—Å–ª–∏ –∂–µ —É —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–µ–ª–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å–µ–≥–æ –æ–¥–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–ª–∏ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫–æ–≥–æ-—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. 
* –¢–æ —Ç–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ—Å–ª–µ —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–µ –º—ñ —Ö–æ—Ç–∏–º –≤–µ—Ä–Ω—É—Ç—å, –±–µ–∑ —Ç–µ–ª–∞ —Ñ—É–Ω–∫—Ü–∏–∏ { }. –≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ù–µ —è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç".

–≠—Ç–æ -------
const addArrow = (a, b, c) => {
    return a + b + c;
};

–ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —ç—Ç–æ -------
const add = (a, b, c) => a + b + c;

// ---------------------

// –ß—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (arguments).

* –û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.

const add = function (a, b, c) {
  console.log(arguments);
  return a + b + c;
};

* –£ —Å—Ç—Ä–µ–ª–æ—á–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π arguments. –ü–æ—ç—Ç–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–æ–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏—é ... rest.

const add = (...args) => {
  console.log(args);
  return a + b + c;
};

// ---------------------

* –û–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –í–æ–∑–≤—Ä–∞—Ç –æ–±—å–µ–∫—Ç–∞.

const fnA = function () {
  return {
    a: 5,
  };
};
console.log(fnA());

*  –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–µ–ª–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é. –í–æ–∑–≤—Ä–∞—Ç –æ–±—å–µ–∫—Ç–∞ —Å —è–≤–Ω—ã–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º.
const arrowFnA = () => {
  return {
    arrowA: 5,
  };
};
console.log(arrowFnA());

*  –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–µ–ª–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é. –í–æ–∑–≤—Ä–∞—Ç –æ–±—å–µ–∫—Ç–∞ —Å –Ω–µ —è–≤–Ω—ã–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º.
const arrowFnA = () => ({ arrowA: 5 });

console.log(arrowFnA());

// ----------------------------------------------------------------------------

// –ü—Ä–∏–º–µ—Ä –±–µ–∑ —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.

const add = function (a, b, c) {
  console.log(a, b, c);
  return a + b + c;
};
console.log(add(5, 10, 15));

// –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —ç—Ç–æ-–∂–µ, –Ω–æ —Å —Å—Ç—Ä–µ–ª–æ—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π.

const add = (a, b, c) => {
  console.log(a, b, c);
  return a + b + c;
};
console.log(add(5, 10, 15));

// ----------------------------------------------------------------------------
// –ü—Ä–∏–º–µ—Ä –∑–∞–º–µ–Ω—ã –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–µ–ª–æ—á–Ω—É—é 1:59:18

// –û–±—ã—á–Ω–∞—è. ----------------
const onGetPositionSuccess = function (position) {
  console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ onGetPositionSuccess');
  console.log(position);
};

const onGetPositionError = function (error) {
  console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ onGetPositionError');
  console.log(error);
};

window.navigator.geolocation.getCurrentPosition(
    onGetPositionSuccess,
    onGetPositionError,
);

// –°—Ç—Ä–µ–ª–æ—á–Ω–∞—è. ----------------
const onGetPositionSuccess = position => {
  console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ onGetPositionSuccess');
  console.log(position);
};

const onGetPositionError = error => {
  console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ onGetPositionError');
  console.log(error);
};

window.navigator.geolocation.getCurrentPosition(
  onGetPositionSuccess,
  onGetPositionError
);
// ----------------------------------------------------------------------------

// –ü—Ä–∏–º–µ—Ä-2 –∑–∞–º–µ–Ω—ã –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —Å—Ç—Ä–µ–ª–æ—á–Ω—É—é

// –û–±—ã—á–Ω–∞—è. –í–∞—Ä–∏–∞–Ω—Ç-1  -----------------------------------

const filter = function (array, test) {
  const filteredArray = [];

  for (const el of array) {
    console.log(el);
    const passed = test(el);

    if (passed) {
      filteredArray.push(el);
    }
  }

  return filteredArray;
};

const callback1 = function (value) {
  return value >= 3;
};

const r1 = filter([1, 2, 3, 4, 5], callback1);
console.log(r1);

const callback2 = function (value) {
  return value <= 4;
};

const r2 = filter([1, 2, 3, 4, 5, 6, 7, 8], callback2);
console.log(r2);

const fruits = [
  { name: 'apples', quantity: 200, isFresh: true },
  { name: 'grapes', quantity: 150, isFresh: false },
  { name: 'bananas', quantity: 100, isFresh: true },
];

const getFruitsWithQuantity = function (fruit) {
  return fruit.quantity >= 120;
};

const r3 = filter(fruits, getFruitsWithQuantity);
console.log(r3);

// –°—Ç—Ä–µ–ª–æ—á–Ω–∞—è. –í–∞—Ä–∏–∞–Ω—Ç-2 -----------------------------------

const filter = (array, test) => {
  const filteredArray = [];

  for (const el of array) {
    console.log(el);
    const passed = test(el);

    if (passed) {
      filteredArray.push(el);
    }
  }

  return filteredArray;
};

const callback1 = value => value >= 3;

const r1 = filter([1, 2, 3, 4, 5], callback1);
console.log(r1);

const callback2 = value => value <= 4;

const r2 = filter([1, 2, 3, 4, 5, 6, 7, 8], callback2);
console.log(r2);

const fruits = [
  { name: 'apples', quantity: 200, isFresh: true },
  { name: 'grapes', quantity: 150, isFresh: false },
  { name: 'bananas', quantity: 100, isFresh: true },
];

const getFruitsWithQuantity = fruit => fruit.quantity >= 120;

const r3 = filter(fruits, getFruitsWithQuantity);
console.log(r3);

// –°—Ç—Ä–µ–ª–æ—á–Ω–∞—è. –í–∞—Ä–∏–∞–Ω—Ç-3 —Å—Ç—Ä–µ–ª–æ—á–Ω–∞—è –∏–Ω–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü–∏—è-----------------------------------

const filter = (array, test) => {
  const filteredArray = [];

  for (const el of array) {
    console.log(el);
    const passed = test(el);

    if (passed) {
      filteredArray.push(el);
    }
  }

  return filteredArray;
};

const r1 = filter([1, 2, 3, 4, 5], value => value >= 3);
console.log(r1);

const r2 = filter([1, 2, 3, 4, 5, 6, 7, 8], value => value <= 4);
console.log(r2);

const fruits = [
  { name: 'apples', quantity: 200, isFresh: true },
  { name: 'grapes', quantity: 150, isFresh: false },
  { name: 'bananas', quantity: 100, isFresh: true },
];

const r3 = filter(fruits, fruit => fruit.quantity >= 120);
console.log(r3);
|============================
*/
// ==========================================================================================
